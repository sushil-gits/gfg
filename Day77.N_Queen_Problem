Approach: Solving the N-Queens Problem Using Backtracking
The N-Queens problem is about placing N queens on an N Ã— N chessboard such that no two queens attack each other. This approach uses backtracking to generate all valid placements.

Steps to Solve the Problem
1. Define a 2D Grid to Track Queen Placement
Use an N x N matrix (grid) initialized with 0, where 1 represents a queen.
2. Check If a Queen Can Be Placed (check function)
Before placing a queen at grid[i][j], ensure:

Row Safety: No queen in the same row.
Column Safety: No queen in the same column.
Upper Left Diagonal Safety: No queen in the upper-left diagonal.
Lower Left Diagonal Safety: No queen in the lower-left diagonal.
If all conditions are met, the placement is valid.

3. Use Backtracking to Explore All Possible Placements (backtrack function)
Start with an empty path (vector<int> path) to store the positions of placed queens.
Try placing a queen in each row for the current column.
If placement is valid, mark the position and move to the next column.
If a valid placement is found for all columns, store the result in ans.
If no valid placement exists for a column, backtrack by removing the last placed queen and try another position.
4. Handle Base Cases
If N == 1, the only possible answer is {{1}}.
If no solution exists, return an empty list.
Time Complexity
O(N!) in the worst case, since we try N options for each column.




//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
//  bool isSafe(vector<string>&board,int row,int col,int n)
//   {
//     //   horizontal safe
//     for(int j=0;j<n;j++)
//      {
//          if(board[row][j]=='Q')
//          return false;
//      }
//     //  vertical safe
//     for(int i=0;i<n;i++)
//     {
//         if(board[i][col]=='Q')
//         return false;
//     }
//     // left diagonal
//     for(int i=row,j=col;i>=0&&j>=0;i--,j--)
//     {
//         if(board[i][j]=='Q')
//         return false;
//     }
//     for(int i=row,j=col;i>=0&&j<n;i--,j++)
//     {
//         if(board[i][j]=='Q')
//         return false;
//     }
//     return true;
//   }
//   void nQueen(vector<string>&board,int row,int n,vector<vector<string>>&ans)
//   {
//       if(row==n)
//       {
//           ans.push_back({board});
//           return;
//       }
//       for(int j=0;j<n;j++)
//       {
//           if(isSafe(board,row,j,n)){
//               board[row][j]=='Q';
//               nQueen(board,row+1,n,ans);
//               board[row][j]='.';
//           }
//       }
//   }
//     vector<vector<int>> nQueen(int n) {
//         // code here
//         vector<string>board(n,string(n,'.'));
//         vector<vector<string>>ans;
//         nQueen(board,0,n,ans);
//         return ans;
//     }

vector<vector<int>>ans;
    bool check(int i,int j,int n,vector<vector<int>> &grid){
        //row,col,left upper diagonal,right upper diagonal
        
        //row
        for(int col=0;col<j;col++){ if(grid[i][col]==1) return 0;}
        //col
        for(int row=0;row<i;row++){ if(grid[row][j]==1) return 0;}
        
        //upper left diagonal
        int a=i,b=j;
        while(a>-1 && b>-1){
            a--; b--;
            if(a>-1 && b>-1)
            if(grid[a][b]==1) return 0;
        }
        
         a=i,b=j;
        while(a>-1 && a<n && b>-1 && b<n){
            a++; b--;
            if(a>-1 && a<n && b>-1 && b<n)
            if(grid[a][b]==1) return 0;
        }
       
        return 1;
    }
    void backtrack(int col,vector<vector<int>>& grid,vector<int>& path,int n){
        if(path.size()==n){
            ans.push_back(path);
            return;
        }
        
        //row traverse
        for(int i=0;i<n;i++){
            if(check(i,col,n,grid)){
                grid[i][col]=1; path.push_back(i+1);
                backtrack(col+1,grid,path,n);
                grid[i][col]=0; path.pop_back();
            }
        }
        return;
    }
    vector<vector<int>> nQueen(int n) {
        // code here
        if(n==1) return {{1}};
        
        vector<vector<int>>grid(n,vector<int>(n,0));
        vector<int>path;
        backtrack(0,grid,path,n);    
        if(ans.size()==0) return {};
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;

        Solution ob;
        vector<vector<int>> ans = ob.nQueen(n);
        if (ans.size() == 0)
            cout << -1 << "\n";
        else {
            sort(ans.begin(), ans.end());
            for (int i = 0; i < ans.size(); i++) {
                cout << "[";
                for (int u : ans[i])
                    cout << u << " ";
                cout << "] ";
            }
            cout << endl;
        }

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
