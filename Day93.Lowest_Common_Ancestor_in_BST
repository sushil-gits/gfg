Stepwise Solution
Step 1: Base Case Handling
If the root is NULL, it means we have reached a leaf node and didn't find n1 or n2. So, return NULL.

If the root is either n1 or n2, then root itself is the LCA because one of the nodes is the ancestor of the other.
if (root == NULL || root == n1 || root == n2)
    return root;
Step 2: Check in Left Subtree
Since it is a Binary Search Tree (BST), if both n1 and n2 have values less than root->data, it means both nodes lie in the left subtree.

Recursively call LCA for the left subtree.
if (n1->data < root->data && n2->data < root->data)
    return LCA(root->left, n1, n2);
Step 3: Check in Right Subtree
If both n1 and n2 have values greater than root->data, it means both nodes lie in the right subtree.

Recursively call LCA for the right subtree.
if (n1->data > root->data && n2->data > root->data)
    return LCA(root->right, n1, n2);
Step 4: Current Node is the LCA
If n1 is in the left subtree and n2 is in the right subtree (or vice versa), then the current root is the Lowest Common Ancestor.

Return the root.
return root;
Example Execution
Example 1
BST Structure
        20
       /  \
      10   30
     /  \    \
    5   15    40
Find LCA of 5 and 15:

n1 = 5, n2 = 15
5 < 20 and 15 < 20 → Both are in the left subtree.
Move to root = 10
5 < 10 and 15 > 10 → root = 10 is LCA.
Example 2
Find LCA of 5 and 40:
n1 = 5, n2 = 40
5 < 20 and 40 > 20 → root = 20 is LCA.
Time Complexity
Best Case: 
𝑂
(
1
)
O(1) if root is directly the LCA.
Worst Case: 
𝑂
(
ℎ
)
O(h) where 
ℎ
h is the height of the BST (for skewed trees).
Average Case: 
𝑂
(
log
⁡
𝑁
)
O(logN) for a balanced BST.

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

class Node {
  public:
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize a new node
    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};

// Function to Build Tree


// } Driver Code Ends
/*
// Tree Node
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    // Constructor to initialize a new node
    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution {
  public:
    Node* LCA(Node* root, Node* n1, Node* n2) {
        // code here
        if(root==NULL || root==n1 ||root==n2)
        return root;
        if(n1->data<root->data && n2->data<root->data)
        return LCA(root->left,n1,n2);
        if(n1->data>root->data && n2->data>root->data)
        return LCA(root->right,n1,n2);
        return root;
    }
};


//{ Driver Code Starts.

Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node* root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}

int main() {

    int t;
    scanf("%d ", &t);
    while (t--) {
        string s;
        int l, h;
        getline(cin, s);
        scanf("%d ", &l);
        scanf("%d ", &h);
        Node* n1 = new Node(l);
        Node* n2 = new Node(h);
        Node* root = buildTree(s);
        Solution sol;
        int ans = sol.LCA(root, n1, n2)->data;
        cout << ans << endl;
        cout << "~"
             << "\n";
    }
    return 1;
}
// } Driver Code Ends
