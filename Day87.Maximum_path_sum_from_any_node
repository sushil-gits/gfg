Approach: Maximum Path Sum in a Binary Tree
Problem Understanding
We need to find the maximum path sum in a binary tree, where a path can start and end at any node. The path sum is the sum of node values along a path.

Approach Explanation
We use a recursive approach (Depth-First Search) to calculate the maximum path sum:

Recursive Function (solve)

This function computes the maximum path sum for each subtree.
For each node:
Recursively compute the left and right subtree sums.
Take the maximum sum from either left or right subtree.
Compute the potential max sum at the node considering:
The node itself (root->data)
The node with its left and right children (root->data + left + right)
The node with one of its subtrees (root->data + max(left, right))
Update the global answer (ans) with the maximum sum encountered.
Return the best sum path including the current node to its parent.
Base Case

If the current node is NULL, return 0 (no contribution to sum).
findMaxSum Function

Calls solve(root, ans) to update ans.
Returns ans as the final result.

Time & Space Complexity
Time Complexity: 
ùëÇ
(
ùëÅ
)
O(N) (Each node is visited once)
Space Complexity: 
ùëÇ
(
ùêª
)
O(H) (Recursive stack space, where H is tree height)

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// Tree Node
class Node {
  public:
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

// Function to Build Tree
Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after splitting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends
// User Fuction template for C++
/*
// Tree Node
class Node {
public:
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
  int solve(Node*root,int &ans)
  {
      if(!root)
      return 0;
      int left=solve(root->left,ans);
      int right=solve(root->right,ans);
      int temp=max(0,max(left,right));
      ans=max(ans,max(root->data+left+right,root->data+temp));
      return root->data+temp;
  }
    // Function to return maximum path sum from any node in a tree.
    int findMaxSum(Node *root) {
        // code here
        int ans=INT_MIN;
        solve(root,ans);
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int tc;
    scanf("%d ", &tc);
    while (tc--) {
        string treeString;
        getline(cin, treeString);
        Solution ob;
        Node *root = buildTree(treeString);
        cout << ob.findMaxSum(root) << "\n";

        cout << "~"
             << "\n";
    }

    return 0;
}

// } Driver Code Ends
