Problem Context

You have a binary tree.

You want to maximize the sum of non-adjacent nodes.

"Non-adjacent" means:
If you take a node, you cannot take its immediate children.



---

Stepwise Approach


---

Step 1: Define DFS function

You define a DFS (Depth-First Search) function:

pair<int,int> dfs(Node* root)

where:

first → maximum sum including this node.

second → maximum sum excluding this node.



---

Step 2: Base Case

if(!root) return {0,0};

If the node is NULL, return {0, 0} — no sum is possible.


---

Step 3: Recursive Calls

auto l = dfs(root->left);
auto r = dfs(root->right);

You recursively solve the left and right subtrees:

l stores {include_left, exclude_left}

r stores {include_right, exclude_right}



---

Step 4: Decision at Current Node

You have two options:

a) Take the current node (root->data)

If you take root, you cannot take left or right children.

So, you add root->data + l.second + r.second.


root->data + l.second + r.second


---

b) Do NOT take the current node

You can freely choose whether to take or not take each child.

The maximum sum without taking root is:


max({
    l.first + r.first,    // both children included
    l.second + r.second,  // both children excluded
    l.first + r.second,   // left included, right excluded
    r.first + l.second    // right included, left excluded
})

This checks all possibilities and picks the best one.


---

Step 5: Return the Pair

Return {take_current, not_take_current} from the dfs function.


---

Step 6: Final Answer

In the getMaxSum function:

auto ans = dfs(root);
return max(ans.first, ans.second);

You take the maximum of:

including the root (ans.first)

excluding the root (ans.second).




//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;
};

// Utility function to create a new Tree Node
Node* newNode(int val) {
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}

// Function to Build Tree
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends

// User function Template for C++

// Node Structure
/*
struct Node
{
    int data;
    Node* left;
    Node* right;
};
*/

class Solution {
  public:
    // Function to return the maximum sum of non-adjacent nodes.
pair<int,int> dfs(Node* root){
        if(!root)return {0,0};
        auto l=dfs(root->left);
        auto r=dfs(root->right);
        //take/not_take
        return {root->data+l.second+r.second,max({l.first+r.first,l.second+r.second,
            l.first+r.second,r.first+l.second
        })};
    }
    int getMaxSum(Node *root) {
        // code here
        auto ans=dfs(root);
        return max(ans.first,ans.second);
    }
};


//{ Driver Code Starts.

// Driver code
int main() {
    int t;
    scanf("%d ", &t);
    while (t--) {
        string s;
        getline(cin, s);
        Node* root = buildTree(s);
        Solution ob;
        cout << ob.getMaxSum(root) << endl;

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
