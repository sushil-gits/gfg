🔍 Purpose:
To find the element that appears only once in an array where all other elements appear more than once (typically twice).

📦 Input:
A vector of integers arr.

🧠 Step-by-Step Logic:
✅ Step 1: Create a Hash Map
unordered_map<int, int> m;
This unordered_map (m) will keep count of how many times each element appears in the array.

🔁 Step 2: Traverse the Array
for (int i : arr) {
    m[i]++;
}
Loop through each element i in the array.

For each element, increment its frequency in the map m.

🔍 Step 3: Find the Element with Frequency 1
for (auto pair : m)
    if (pair.second == 1)
        return pair.first;
Loop through the key-value pairs in the map.

If any element has a count of 1, return that element — that’s the unique one.

✅ Return Value:
The function returns the element that occurs exactly once in the array.

📝 Time and Space Complexity:
Time Complexity: O(n) — traverses the array once and the map once.

Space Complexity: O(n) — due to extra space used for the hash map.

  //{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends

// User function Template for C++

class Solution {
  public:
    int getSingle(vector<int> &arr) {
        // code here
        unordered_map<int,int>m;
        for(int i:arr)
        {
            m[i]++;
        }
        for(auto pair:m)
        if(pair.second==1)
        return pair.first;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        Solution ob;
        int ans = ob.getSingle(arr);
        cout << ans << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
