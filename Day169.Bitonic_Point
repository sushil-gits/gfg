‚úÖ Problem Statement:
You are given a bitonic array arr, which is a sequence of integers that:

first increases and then decreases, or

is strictly increasing or strictly decreasing.

Your task is to find the maximum element in this array.

üîç Example:
Input:  arr = [1, 3, 8, 12, 4, 2]
Output: 12

Input:  arr = [10, 20, 30, 40]
Output: 40

Input:  arr = [100, 80, 60]
Output: 100
‚úÖ Stepwise Approach (for the provided linear solution):
Step 1: Get the size of the array n using arr.size().

Step 2: Loop from index 0 to n - 2 (i.e., up to the second last element):

For each index i, check if the current element arr[i] is greater than the next element arr[i + 1].

This condition means you've reached the peak of the bitonic sequence.

Step 3: If such an element is found, return it immediately ‚Äî that‚Äôs the maximum in the bitonic array.

Step 4: If the loop completes without finding a peak (i.e., the array is strictly increasing), return the last element arr[n - 1] as it is the maximum.

‚è± Time Complexity:
O(n) ‚Äî since it may need to check each pair once in the worst case.

‚ö° Suggestion for Optimization:
This can be optimized to O(log n) using binary search, since the array is bitonic.


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

// User function template for C++
class Solution {
  public:
    int findMaximum(vector<int> &arr) {
        // code here
        int n=arr.size();
        for(int i=0;i<n-1;i++)
        {
            if(arr[i]>arr[i+1])
            return arr[i];
        }
        return arr[n-1];
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();

    while (t--) {
        vector<int> arr;
        int value;

        // Read the entire line of integers
        string line;
        // cin.ignore(); // Ignore the newline after the test case input
        getline(cin, line);
        stringstream ss(line);

        // Parse integers and add them to the vector
        while (ss >> value) {
            arr.push_back(value);
        }

        Solution ob;
        auto ans = ob.findMaximum(arr);
        cout << ans << "\n";
        cout << "~"
             << "\n";
    }
    return 0;
}

// } Driver Code Ends
