Approach for Finding Kth Smallest Element in a BST using Inorder Traversal
1️⃣ Understanding the Problem
Given a Binary Search Tree (BST), we need to find the kth smallest element.

A BST follows the property:
Left subtree values < Root value < Right subtree values
The inorder traversal (LNR: Left → Node → Right) of a BST gives elements in sorted order.
The kth smallest element in BST is the kth element in inorder traversal.
2️⃣ Approach
We use inorder traversal (DFS - Depth First Search) to find the kth smallest element efficiently.

Steps:
Perform an inorder traversal of the BST:

Recursively visit the left subtree (smaller values).
Process the current node (decrement k).
If k == 0, store the node's value as the result and stop traversal.
Recursively visit the right subtree (larger values).
Pass k as a reference (int &k) so its decrement is reflected across recursive calls.

Stop early when the kth element is found, avoiding unnecessary traversal.

3️⃣ Code Explanation

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

// Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

// Function to Build Tree
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node* root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends
/*Complete the function below

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
  void kthSmallest(Node*root,int &k,int &ans)
  {
      if(!root)
      return;
    //   traversing left subtree
    kthSmallest(root->left,k,ans);
    k--;
    if(k==0)
    {
        ans=root->data;
        return;
    }
    if(k<=0)
    return;
    kthSmallest(root->right,k,ans);
    
    
  }
    // Return the Kth smallest element in the given BST
    int kthSmallest(Node *root, int k) {
        // add code here.
    int ans=-1;
       kthSmallest(root,k,ans);
       return ans;
    }
};

//{ Driver Code Starts.
int main() {

    int t;
    string tc;
    getline(cin, tc);
    t = stoi(tc);
    while (t--) {
        string s;
        getline(cin, s);
        Node* root = buildTree(s);

        getline(cin, s);
        int k = stoi(s);
        //  getline(cin, s);
        Solution obj;
        cout << obj.kthSmallest(root, k) << endl;
        // cout<<"~"<<endl;

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends



4️⃣ Dry Run Example
BST Example:
markdown
Copy
Edit
        5
       / \
      3   7
     / \   \
    2   4   8
Function Call:
cpp
Copy
Edit
Solution obj;
cout << obj.kthSmallest(root, 3);
Inorder Traversal (Sorted Order):
csharp
Copy
Edit
[2, 3, 4, 5, 7, 8]
k = 3, so the 3rd smallest element = 4.
✅ Output: 4

5️⃣ Time & Space Complexity
✅ Time Complexity: O(H + k) ≈ O(k)

Best case: If k is small, we stop early (O(k)).
Worst case: In a skewed tree, we may traverse all nodes (O(N)).
In a balanced BST, height H = log N, so O(log N + k).
✅ Space Complexity: O(H) ≈ O(log N) (for recursion stack)

O(log N) for balanced BST.
O(N) for skewed BST.
6️⃣ Summary of Approach
Use inorder traversal to process nodes in sorted order.
Decrement k at each visited node; when k == 0, store result.
Pass k by reference to track updates across recursive calls.
Early stopping when the kth smallest is found for efficiency.
