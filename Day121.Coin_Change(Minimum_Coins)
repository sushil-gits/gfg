Stepwise Approach:
1. Understanding the Problem Statement:
We are given an array of coin denominations and a target sum. The goal is to find the minimum number of coins required to form that sum. If it is not possible, return -1.

2. Function Definitions:
get(i, sum, coins, dp):

A recursive function to determine the minimum number of coins needed to form the given sum using the first i coins.
Uses memoization (dp table) to store results for already computed subproblems.
minCoins(coins, sum):

The main function that initializes the dp table and calls the recursive function.
Returns the final answer.
3. Base Cases in get(i, sum, coins, dp):
If sum == 0, return 0 because no coins are needed to make sum 0.
If i < 0, return a large number (1e9) indicating it's not possible to form the sum with available coins.
If dp[i][sum] != -1, return the precomputed result to avoid redundant calculations.
4. Recursive Choice (Picking and Not Picking the Coin):
For each coin at index i:

Option 1: Take the Coin (if sum >= coins[i])
Reduce the sum by coins[i] and call get(i, sum - coins[i], coins, dp).
Increase the count by 1 since we took one coin.
Option 2: Don't Take the Coin
Move to the previous coin: get(i - 1, sum, coins, dp).
The minimum value of the two choices is stored in dp[i][sum].
5. Returning the Final Answer:
Call get(n-1, sum, coins, dp) from minCoins().
If the result is 1e9, return -1 (since it is not possible to form the sum).
Otherwise, return the computed minimum coins.
Code with Stepwise Explanation:
int get(int i, int sum, vector<int>& coins, vector<vector<int>>& dp) {
    // Base Case 1: If sum becomes 0, no coins are needed
    if (sum == 0)
        return 0;

    // Base Case 2: If no more coins are left but sum is still positive, return a large number
    if (i < 0)
        return 1e9;

    // Memoization check: If already computed, return the stored value
    if (dp[i][sum] != -1)
        return dp[i][sum];

    int take = 1e9; // Initially assume we are not taking the coin

    // Choice 1: Take the current coin if it does not exceed the remaining sum
    if (sum >= coins[i])
        take = 1 + get(i, sum - coins[i], coins, dp);

    // Choice 2: Skip the current coin and move to the previous one
    int notTake = get(i - 1, sum, coins, dp);

    // Store the minimum of both choices in the dp table
    return dp[i][sum] = min(take, notTake);
}

int minCoins(vector<int>& coins, int sum) {
    int n = coins.size();

    // Initialize dp table with -1 (uncomputed state)
    vector<vector<int>> dp(n, vector<int>(sum + 1, -1));

    // Compute the answer using recursion + memoization
    int ans = get(n - 1, sum, coins, dp);

    // If ans is still 1e9, return -1 (impossible case), else return ans
    return (ans == 1e9) ? -1 : ans;
}
Time Complexity Analysis:
State Variables: i (coin index) and sum (remaining sum).
Recursive Calls: Each state (i, sum) is computed only once due to memoization.
Total States: O(n * sum), where n is the number of coins.
Each State Computation: O(1).
Overall Complexity: O(n * sum), which is efficient compared to the exponential brute-force approach.
Space Complexity Analysis:
DP Table: O(n * sum).
Recursive Stack: O(n) (depth of recursion).
Total Space Complexity: O(n * sum).
Example Walkthrough
Example 1:
Input: coins = {1, 2, 5}, sum = 11
Output: 3
Explanation: We can use 5 + 5 + 1 = 11 (minimum 3 coins).
Example 2:
Input: coins = {2}, sum = 3
Output: -1
Explanation: We cannot form sum 3 using only coin 2.


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
  int get(int i,int sum,vector<int>&coins,vector<vector<int>>&dp)
  {
      if(sum==0)
      return 0;
      if(i<0)
      return 1e9;
      if(dp[i][sum]!=-1)
      return dp[i][sum];
      int take=1e9;
      if(sum>=coins[i])
      take=1+get(i,sum-coins[i],coins,dp);
      return dp[i][sum]=min(take,get(i-1,sum,coins,dp));
  }
    int minCoins(vector<int> &coins, int sum) {
        // code here
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        int ans=get(n-1,sum,coins,dp);
        return ans==1e9?-1:ans;
    }
};


//{ Driver Code Starts.

int main() {
    string ts;
    getline(cin, ts);
    int t = stoi(ts);
    while (t--) {
        string ks;
        getline(cin, ks);
        int k = stoi(ks);
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        Solution obj;
        int res = obj.minCoins(arr, k);
        cout << res << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
