1Ô∏è‚É£ Approach 1: Using Recursion with Min-Max Constraints (Efficient)
Idea:
A BST follows the property:
For every node, all nodes in the left subtree must be smaller, and all nodes in the right subtree must be larger.
We use a recursive function (isBSTutil) that:
Ensures the root->data is between minVal and maxVal.
Recursively checks left subtree (maxVal is updated to root->data).
Recursively checks right subtree (minVal is updated to root->data).
Steps:
Base case: If root is NULL, return true (empty tree is a BST).
Check BST property:
If root->data ‚â§ minVal OR root->data ‚â• maxVal, return false.
Recursive call on left and right subtree:
Left subtree: Call isBSTutil(root->left, minVal, root->data).
Right subtree: Call isBSTutil(root->right, root->data, maxVal).
Return true only if both subtrees satisfy the BST condition.
Time Complexity:
O(N) ‚Üí We visit each node once.

class Solution {
public:
    bool isBSTutil(Node* root, int minVal, int maxVal) {
        if (!root) return true; // Empty tree is BST
        if (root->data <= minVal || root->data >= maxVal) return false;
        
        return isBSTutil(root->left, minVal, root->data) && 
               isBSTutil(root->right, root->data, maxVal);
    }

    bool isBST(Node* root) {
        return isBSTutil(root, INT_MIN, INT_MAX);
    }
};

2Ô∏è‚É£ Approach 2: Using Inorder Traversal (Alternative)
Idea:
Inorder traversal of a BST gives a sorted array (in ascending order).
If the inorder traversal of a tree is sorted, the tree is a BST.
We store the traversal in a vector and check if it is sorted.
Steps:
Perform inorder traversal and store elements in a vector.
Check if the array is sorted:
If any ans[i] > ans[i+1], return false.
Otherwise, return true.
Time Complexity:
O(N) ‚Üí We visit each node once and check sorting in O(N).
Space Complexity:
O(N) ‚Üí We store the inorder traversal in a vector.

Code:
class Solution {
public:
    void inorderTraversal(Node* root, vector<int>& ans) {
        if (!root) return;
        inorderTraversal(root->left, ans);
        ans.push_back(root->data);
        inorderTraversal(root->right, ans);
    }

    bool isBST(Node* root) {
        vector<int> ans;
        inorderTraversal(root, ans);
        
        for (int i = 0; i < ans.size() - 1; i++) {
            if (ans[i] > ans[i + 1]) return false;
        }
        
        return true;
    }
};
üîç Key Comparisons:
Approach	Time Complexity	Space Complexity	Optimal?
Recursive Min-Max	O(N)	O(1) (no extra space)	‚úÖ Best approach
Inorder Traversal	O(N)	O(N) (extra vector)	‚ùå Less optimal
Final Recommendation:
Use the first approach (Min-Max Recursion) because it is more space-efficient (O(1)) and directly validates the BST property. üöÄ

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

// Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


// } Driver Code Ends
class Solution {
  public:
  
//   using recursive call
//   bool isBSTutil(Node*root,int minVal,int maxVal)
//   {
//       if(!root)
//       return true;
//       if(root->data<=minVal || root->data>=maxVal)
//       return false;
//       return isBSTutil(root->left,minVal,root->data)&& isBSTutil(root->right,root->data,maxVal);
//   }
//     // Function to check whether a Binary Tree is BST or not.
//     bool isBST(Node* root) {
//         // Your code here
//         return isBSTutil(root,INT_MIN,INT_MAX);
//     }

    //   using inorder traversal
          void solve(Node*root,vector<int>&ans){
              if(!root)
              return;
              solve(root->left,ans);
              ans.push_back(root->data);
              solve(root->right,ans);
          }
        bool isBST(Node* root) {
            vector<int>ans;
            solve(root,ans);
            for(int i=0;i<ans.size()-1;i++)
            if(ans[i]>ans[i+1])
            return false;
            return true;
        }
        

};


//{ Driver Code Starts.

// Function to Build Tree
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node* root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}

void inorder(Node* root, vector<int>& v) {
    if (root == NULL)
        return;

    inorder(root->left, v);
    v.push_back(root->data);
    inorder(root->right, v);
}

int main() {

    int t;
    string tc;
    getline(cin, tc);
    t = stoi(tc);
    while (t--) {
        string s;
        getline(cin, s);
        // if (s[0] == '9') {
        //     cout << "false\n";
        //     return 0;
        // }
        Node* root = buildTree(s);
        Solution ob;
        if (ob.isBST(root))
            cout << "true\n";

        else
            cout << "false\n";
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends




