Stepwise Approach for maxOfSubarrays Function
The function implements two approaches:

Brute Force Approach → O(n * k)
Optimized Approach (Using Deque) → O(n)
1️⃣ Brute Force Approach (Nested Loops)
This approach finds the maximum element for every subarray of size k by iterating over each subarray and comparing elements.

Steps:
Initialize variables:

n = arr.size(): Get the size of the array.
ans: A vector to store the maximum elements of each subarray.
Iterate over each subarray of size k:

Run a loop from i = 0 to i <= n - k to cover all subarrays of size k.
Find the maximum element in the subarray [i, i + k - 1]:

Initialize temp = arr[i] (first element of the subarray).
Run an inner loop from j = i to j < i + k:
Update temp = max(temp, arr[j]).
Store the maximum value of the current subarray in ans.

Return ans after processing all subarrays.

Dry Run Example
Input:
arr = [1, 3, 2, 5, 8, 6, 4], k = 3
Step-by-Step Execution:
Subarray	Max Element
[1, 3, 2]	3
[3, 2, 5]	5
[2, 5, 8]	8
[5, 8, 6]	8
[8, 6, 4]	8
Output: [3, 5, 8, 8, 8]
✅ Time Complexity: O(n * k) (Slow for large n)

2️⃣ Optimized Approach (Using Deque)
This approach maintains a deque (double-ended queue) to efficiently find the maximum element in each window in O(n) time.

Steps:
Initialize deque d to store indices of elements in the current window.
Iterate through each element in arr:
Remove elements outside the current window:
If the front index in d is i - k, remove it (pop_front()).
Remove smaller elements from the back of d:
If arr[d.back()] <= arr[i], remove it (pop_back()) since it won't be useful.
Insert the current element index into d (push_back(i)).
Store the max element for valid windows (i >= k - 1):
The front of d contains the index of the maximum element in the current window.
Dry Run Example
Input:
arr = [1, 3, 2, 5, 8, 6, 4], k = 3
Step-by-Step Execution:
Index i	Element arr[i]	Deque d (stores indices)	Maximum in Window
0	1	[0]	-
1	3	[1] (1 removed)	-
2	2	[1, 2]	3
3	5	[3] (1,2 removed)	5
4	8	[4] (3 removed)	8
5	6	[4, 5]	8
6	4	[4, 5, 6]	8
Output: [3, 5, 8, 8, 8]
✅ Time Complexity: O(n) (Efficient using deque)
✅ Space Complexity: O(k) (For deque storage)

Final Thoughts
Approach	Time Complexity	Space Complexity	Suitable For
Brute Force	O(n * k)	O(1)	Small inputs
Deque (Optimized)	O(n)	O(k)	Large inputs


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
  vector<int> maxOfSubarrays(vector<int>& arr, int k) {
    int n = arr.size();
    vector<int> ans;
    // brutt force approach
    for (int i = 0; i <= n - k; i++) {
        int temp = arr[i];
        for (int j = i; j < i + k; j++) {
            temp = max(temp, arr[j]);  // Compare with arr[j] instead of arr[i]
        }
        ans.push_back(temp);
    }
    return ans;
    
    
    // optimzed aproach using deque
    deque<int>d;
    for(int i=0;i<n;i++)
    {
        // remove elements outside the current element
        if(!d.empty()&&d.front()==i-k)
        d.pop_front();
        // remove elements from the back which are smaller than the current element 
        while(!d.empty()&&arr[d.back()]<=arr[i])
        d.pop_back();
        // push the current element index
        d.push_back(i);
        // store result after the first k element
        if(i>=k-1)
        ans.push_back(arr[d.front()]);
    }
    return ans;
    
  }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore(); // Ignore newline character after t

    while (t--) {
        vector<int> arr;
        int k;
        string inputLine;

        getline(cin, inputLine); // Read the array input as a line
        stringstream ss(inputLine);
        int value;
        while (ss >> value) {
            arr.push_back(value);
        }

        cin >> k;
        cin.ignore(); // Ignore newline character after k input

        Solution obj;
        vector<int> res = obj.maxOfSubarrays(arr, k);
        for (int i = 0; i < res.size(); i++)
            cout << res[i] << " ";
        cout << endl;
        cout << "~"
             << "\n";
    }

    return 0;
}

// } Driver Code Ends
