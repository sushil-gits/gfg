Stepwise Approach for isSubsetSum Function
This function determines whether a subset exists in the array arr that sums up to the given sum using Dynamic Programming (DP) with space optimization.

Step 1: Understand the Problem Statement
Input:
vector<int>& arr: Array of integers.
int sum: Target sum to check if any subset forms this sum.
Output:
Returns true if a subset exists with the given sum.
Returns false otherwise.
Step 2: Define DP Table with Space Optimization
Instead of using a 2D DP table, we use two 1D vectors (prev and curr) to store results of previous computations.
vector<bool> prev(sum+1, false);
vector<bool> curr(sum+1, false);
prev[s]: Stores whether a subset sum of s is possible using elements from index 0 to i-1.
curr[s]: Stores the current row result for index i.
Step 3: Base Case Initialization
prev[0] = true; // A subset with sum 0 is always possible (empty subset)
If the sum is 0, an empty subset can always achieve it.
Step 4: Iterate Over Elements and Compute Subset Sums
We use two nested loops to fill the DP table.

Outer loop: Iterates over each element of the array.
Inner loop: Iterates over possible subset sums (0 to sum).
for(int ind = 1; ind <= n; ind++) {  // Iterate over each element
    for(int s = 0; s <= sum; s++) {  // Iterate over all possible sums
If s == 0, the subset sum 0 is always possible (empty subset).
if (s == 0) {
    curr[s] = true;
    continue;
}
Two choices for each element:
Not Take the Current Element
If prev[s] was true, the subset sum remains achievable.
Take the Current Element (if possible)
If s >= arr[ind-1], check if prev[s - arr[ind-1]] is true.
bool notTake = prev[s];
bool take = false;
if (s >= arr[ind-1]) take = prev[s - arr[ind-1]];
bool ans = take | notTake;
curr[s] = ans;
Update prev for the next iteration.
prev = curr;
Step 5: Return the Final Result
return prev[sum]; // Return whether a subset with sum exists
The answer for sum is stored in prev[sum].
Time & Space Complexity Analysis
Time Complexity:
Outer loop: Runs for n elements → O(n).
Inner loop: Runs for sum + 1 possible values → O(sum).
Total Complexity: O(n × sum).
Space Complexity:
Uses two 1D vectors of size sum + 1.
Optimized space: O(sum) instead of O(n × sum) (as in standard DP).
Example Execution
Input:
arr = {3, 34, 4, 12, 5, 2};
sum = 9;
DP Table Computation:
Sum →	0	1	2	3	4	5	6	7	8	9
Step 1: 3	✅	❌	❌	✅	❌	❌	❌	❌	❌	❌
Step 2: 34	✅	❌	❌	✅	❌	❌	❌	❌	❌	❌
Step 3: 4	✅	❌	❌	✅	✅	❌	❌	✅	❌	❌
Step 4: 12	✅	❌	❌	✅	✅	❌	❌	✅	❌	✅
Final: ✅	❌	❌	✅	✅	✅	❌	✅	❌	✅	
Output:
true  // Subset {4, 5} forms sum 9
Final Summary
✅ Uses bottom-up DP with space optimization.
✅ Efficient for large inputs compared to O(2^n) recursion.
✅ Helps in knapsack problems & partition problems.



//{ Driver Code Starts

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    bool isSubsetSum(vector<int>& arr, int sum) {
        // code here
     int n=arr.size();
        vector<bool> prev(sum+1,false);
        vector<bool> curr(sum+1,false);
        prev[0]=true;
        for(int ind=1;ind<=n;ind++){
            for(int s=0;s<=sum;s++){
                if(s==0){
                    curr[s]=true;
                    continue;
                }
                bool notTake=prev[s];
                bool take=false;
                if(s>=arr[ind-1]) take=prev[s-arr[ind-1]];
                bool ans=take|notTake;
                curr[s]=ans;
            }
            prev=curr;
        }
        return prev[sum];
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        int sum;
        cin >> sum;
        cin.ignore();

        Solution ob;
        if (ob.isSubsetSum(arr, sum))
            cout << "true" << endl;
        else
            cout << "false" << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
