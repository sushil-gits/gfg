Approach for the Given Code (Pair Sum in BST)
The code aims to check whether there exists a pair of nodes in a Binary Search Tree (BST) whose sum equals a given target value. The solution follows these steps:

Step 1: Inorder Traversal to Get Sorted Elements
Since a BST's inorder traversal gives elements in sorted order, we can store them in a vector.
A helper function inorder(Node *root, vector<int>& ans) is used to perform an inorder traversal of the BST and store the elements in a vector ans[].
Step 2: Use Two-Pointer Technique on Sorted Array
After storing the BST elements in a sorted array ans[], we use two pointers:
Left pointer (i) → Starts at the beginning (i = 0).
Right pointer (j) → Starts at the end (j = ans.size() - 1).
We check if the sum of elements at both pointers equals the target:
If sum == target, return true.
If sum < target, move left pointer forward (i++) to increase the sum.
If sum > target, move right pointer backward (j--) to decrease the sum.
If no pair is found, return false.
Time & Space Complexity Analysis
Operation	Time Complexity	Space Complexity
Inorder Traversal	O(N)	O(N) (stores elements in vector)
Two Pointer Search	O(N)	O(1) (only uses two pointers)
Overall Complexity	O(N)	O(N)
The solution efficiently finds the pair sum using O(N) time and O(N) space.

#############################################################################################




//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000
#define MAX_SIZE 100000

// Tree Node
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

// Function to Build Tree
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node* root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends
/*
Node is as follows
class Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
//   inorder travevrssal to get element in sorted order
  void inorder(Node *root,vector<int>&ans)
  {
      if(!root)
      return;
      inorder(root->left,ans);
      ans.push_back(root->data);
      inorder(root->right,ans);
  }
    bool findTarget(Node *root, int target) {
        // your code here.
        vector<int>ans;
        inorder(root,ans);
        int i=0,j=ans.size()-1;
        while(i<j)
        {
            if(ans[i]+ans[j]==target)
            return true;
            else if(ans[i]+ans[j]<target)
            i++;
            else
            j--;
        }
        return false;
        
    }
};

//{ Driver Code Starts.
int main() {

    int t;
    string tc;
    getline(cin, tc);
    t = stoi(tc);
    while (t--) {
        string s;
        getline(cin, s);
        Node* root = buildTree(s);

        getline(cin, s);
        int k = stoi(s);
        // getline(cin, s);
        Solution obj;
        cout << obj.findTarget(root, k) << endl;
        // cout<<"~"<<endl;

        cout << "~"
             << "\n";
    }
    return 0;
}

// } Driver Code Ends
