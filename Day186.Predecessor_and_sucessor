Problem Statement:
Given a Binary Search Tree (BST) and a key, find the inorder predecessor and successor of the given key in the BST. If the key does not exist in the BST, return the nodes between which the key would lie if it were inserted into the BST.

Function Signature:
vector<Node*> findPreSuc(Node* root, int key)
Input:

root: Pointer to the root of the BST.

key: The key for which the predecessor and successor need to be found.

Output:

A vector of two Node pointers: {predecessor, successor}. If either does not exist, return NULL for that position.

Stepwise Approach:
Initialize Pointers:

Initialize pre (predecessor) and suc (successor) as NULL.

Find Predecessor:

Start from the root and traverse the BST.

If the current node's data is less than the key:

Update pre to the current node (as it could be a potential predecessor).

Move to the right child (since a larger predecessor might exist in the right subtree).

Else:

Move to the left child (since the current node is larger or equal to the key, the predecessor must be in the left subtree).

Find Successor:

Start again from the root and traverse the BST.

If the current node's data is greater than the key:

Update suc to the current node (as it could be a potential successor).

Move to the left child (since a smaller successor might exist in the left subtree).

Else:

Move to the right child (since the current node is smaller or equal to the key, the successor must be in the right subtree).

Return Result:

Return the pre and suc pointers as a vector.

Solution Code:
cpp
#include <vector>
using namespace std;

struct Node {
    int data;
    Node *left, *right;
};

vector<Node*> findPreSuc(Node* root, int key) {
    Node *pre = NULL;
    Node *suc = NULL;
    Node *curr = root;

    // Find predecessor
    while (curr) {
        if (curr->data < key) {
            pre = curr;
            curr = curr->right;
        } else {
            curr = curr->left;
        }
    }

    curr = root;
    // Find successor
    while (curr) {
        if (curr->data > key) {
            suc = curr;
            curr = curr->left;
        } else {
            curr = curr->right;
        }
    }

    return {pre, suc};
}
Explanation:
Predecessor: The predecessor is the largest node smaller than the key. We traverse the BST, moving right whenever the current node is smaller than the key (updating pre), and left otherwise.

Successor: The successor is the smallest node larger than the key. We traverse the BST, moving left whenever the current node is larger than the key (updating suc), and right otherwise.

The algorithm efficiently narrows down the search by leveraging the BST property (left subtree values are smaller, right subtree values are larger), ensuring optimal performance with a time complexity of O(height of the BST).




//{ Driver Code Starts
// C++ program to find predecessor and successor in a BST
#include "bits/stdc++.h"
using namespace std;

// BST Node
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    Node(int x) {
        data = x;
        left = NULL;
        right = NULL;
    }
};


// } Driver Code Ends

/* BST Node
class Node
{
   public:
    int data;
    Node *left;
    Node *right;

    Node(int x){
        data = x;
        left = NULL;
        right = NULL;
    }
}; */

class Solution {
  public:
    vector<Node*> findPreSuc(Node* root, int key) {
        // code here
        Node *pre=NULL;
        Node *suc=NULL;
        Node *curr=root;
        while(curr)
        {
            if(curr->data<key)
            {
                pre=curr;
                curr=curr->right;
            }
            else
            curr=curr->left;
        }
        curr=root;
        while(curr)
        {
            if(curr->data>key)
            {
                suc=curr;
                curr=curr->left;
            }
            else
            curr=curr->right;
        }
        return {pre,suc};
    }
};


//{ Driver Code Starts.

Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node* root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}

// Driver program to test above functions
int main() {

    int t;
    string tc;
    getline(cin, tc);
    t = stoi(tc);
    while (t--) {
        string s;
        getline(cin, s);
        Node* root = buildTree(s);
        getline(cin, s);
        int key = stoi(s);

        Solution ob;
        vector<Node*> result = ob.findPreSuc(root, key);
        Node* pre = result[0];
        Node* suc = result[1];

        if (pre != nullptr)
            cout << pre->data << " ";
        else
            cout << -1 << " ";

        if (suc != nullptr)
            cout << suc->data << endl;
        else
            cout << -1 << endl;
        cout << "~" << endl;
    }
    return 0;
}
// } Driver Code Ends
