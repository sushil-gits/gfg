Input and Output:
Input: A reference to a string s.
Output: A vector<string> containing all permutations of the string.
Steps in the Code:
Step 1: Sort the string:
The input string s is sorted using sort(s.begin(), s.end()). Sorting ensures that permutations are generated in lexicographical (dictionary) order.
Step 2: Generate permutations:
The do-while loop generates all permutations of the string using the next_permutation function from the C++ STL:
next_permutation(s.begin(), s.end()) rearranges the string s to the next lexicographical permutation.
The permutations are generated until the loop cycles back to the original lexicographical order (end of all permutations).
Step 3: Store permutations:
Each generated permutation is stored in the vector per using per.push_back(s).
Return the Result:
Once all permutations are generated and stored in the vector, the function returns the vector per.


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
};
// Utility function to create a new Tree Node
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    
    return temp;
}

// Function to Build Tree
Node* buildTree(string str)
{   
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
            return NULL;
    
    // Creating vector of strings from input 
    // string after spliting by space
    vector<string> ip;
    
    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);
        
    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));
          
    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);
        
    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {
            
        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();
            
        // Get the current node's value from the string
        string currVal = ip[i];
            
        // If the left child is not null
        if(currVal != "N") {
                
            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->left);
        }
            
        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];
            
        // If the right child is not null
        if(currVal != "N") {
                
            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }
    
    return root;
}

// Function for Inorder Traversal
void printInorder(Node* root)
{
    if(!root)
        return;
        
    printInorder(root->left);
    cout<<root->data<<" ";
    printInorder(root->right);
}


// } Driver Code Ends
class Solution
{
    public:
    //Function to find the vertical order traversal of Binary Tree.
    vector<int> verticalOrder(Node *root)
    {
        //Your code here
        map<int, vector<int>> mp;
    queue<pair<Node*, int>> q;
    
    q.push(make_pair(root, 0));
    while(!q.empty()){
        pair<Node*, int> p=q.front();
        mp[p.second].push_back(p.first->data);
        if(p.first->left){
            q.push(make_pair(p.first->left, p.second-1));
        }
        if(p.first->right){
            q.push(make_pair(p.first->right, p.second+1));
        }
        q.pop();
    }
    
   vector<int> v;
   for(auto it: mp){
       for(auto it1: it.second){
            v.push_back(it1);
       }
   }
   return v;
    }
};



//{ Driver Code Starts.
int main() {
    int t;
    string  tc;
    getline(cin,tc);
    t=stoi(tc);
    while(t--)
    {
        string s;
        getline(cin,s);
        // string c;
        // getline(cin,c);
        Solution obj;
    	Node* root = buildTree(s);
    	
    	vector <int> res = obj.verticalOrder(root);
    	for (int i : res) cout << i << " ";
        cout << endl;
    
cout << "~" << "\n";
}
	return 0;
}



// } Driver Code Ends
