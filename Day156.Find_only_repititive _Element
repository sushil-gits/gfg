🔍 Problem:
You're given an array arr which contains integers. The goal is to find any one duplicate element in the array.

✅ Code:
int findDuplicate(vector<int>& arr) {
    sort(arr.begin(), arr.end());
    for(int i = 0; i < arr.size(); i++) {
        if(arr[i] == arr[i+1])
            return arr[i];
    }
    return -1;
}
🧠 Step-by-Step Approach:
Input: A vector arr containing n integers.

Sort the Array:
sort(arr.begin(), arr.end());
This arranges the elements of the array in non-decreasing order.

Why? Because if any duplicate exists, it will now be adjacent in the sorted array.

Traverse the Sorted Array:
for(int i = 0; i < arr.size(); i++) {
    if(arr[i] == arr[i+1])
        return arr[i];
}
Loop through the array from index 0 to n-2 (since we access i+1).

At each step, check if the current element is equal to the next one.

If they are equal, it means this is a duplicate, so return it.

Return -1 if No Duplicate Found:
return -1;
This line will only be reached if the loop completes without finding any duplicates.

⚠️ Important Note:
This code may crash if the duplicate is at the last position, since arr[i+1] will go out of bounds when i == arr.size() - 1.

👉 To fix this, the loop condition should be:
for(int i = 0; i < arr.size() - 1; i++)
💡 Time & Space Complexity:
Time Complexity:
Sorting takes O(n log n), and the loop takes O(n).
So, total = O(n log n).

Space Complexity:

Sorting is in-place → O(1) extra space (not counting input).

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

// User function Template for C++
class Solution {
  public:
    int findDuplicate(vector<int>& arr) {
        // code here
sort(arr.begin(),arr.end());
for(int i=0;i<arr.size();i++)
{
    if(arr[i]==arr[i+1])
    return arr[i];
}
return -1;
    }
};


//{ Driver Code Starts.

int main() {

    int test_cases;
    cin >> test_cases;
    cin.ignore();
    while (test_cases--) {
        string input;
        vector<int> arr;

        // Read the array from input line
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        // Solution instance to invoke the function
        Solution ob;
        int result = ob.findDuplicate(arr);

        cout << (result) << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
