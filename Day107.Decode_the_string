Problem Statement
Given an encoded string with the format k[encoded_string], where k is the number of times the encoded_string should be repeated, decode it.
Example:
Input: "3[a2[bc]]"
Output: "abcbcabcbcabcbc"
Step-by-Step Explanation
Step 1: Initialize Stacks and Variables
countStack: Stores multipliers (e.g., k values).
stringStack: Stores intermediate results of strings.
currString: Holds the current decoded string.
currNum: Helps construct multi-digit numbers.
stack<int> countStack;
stack<string> stringStack;
string currString = "";
int currNum = 0;
Step 2: Iterate Through Each Character of the String
We process each character in s one by one.
for (char c : s) {
Step 3: If the Character is a Digit
Build multi-digit numbers (k values).
Convert character to integer using c - '0' and construct the full number.
if (isdigit(c)) {
    currNum = currNum * 10 + (c - '0');
}
Example:

If the input is "12[a]", currNum becomes 12.
Step 4: If the Character is [
Push currNum (multiplier) to countStack.
Push currString (previous string before [) to stringStack.
Reset currNum and currString for new processing.
else if (c == '[') {
    countStack.push(currNum);
    stringStack.push(currString);
    currNum = 0;
    currString = "";
}
Example: For "3[a2[bc]]", when we reach [ after 3, we store 3 in countStack and an empty string in stringStack.

Step 5: If the Character is ]
Pop the multiplier from countStack.
Build the repeated substring.
Append this substring to the previous stored string from stringStack.
else if (c == ']') {
    int repeat = countStack.top();
    countStack.pop();
    
    string temp = "";
    for (int i = 0; i < repeat; i++) {
        temp += currString;
    }
    
    currString = stringStack.top() + temp;
    stringStack.pop();
}
Example: For "3[a2[bc]]", processing 2[bc] results in "bcbc", and then 3[a...] results in "abcbcabcbcabcbc".

Step 6: If the Character is a Letter
Simply append it to currString.
else {
    currString += c;
}
Example: For "abc3[d]", currString stores "abc" before 3[d] is processed.

Final Step: Return the Decoded String
return currString;
Driver Code to Test
#include <bits/stdc++.h>
using namespace std;

int main() {
    string s = "3[a2[bc]]";
    cout << decodedString(s) << endl;  // Output: "abcbcabcbcabcbc"
    return 0;
}
Time Complexity Analysis
O(N): Each character is processed once and pushed/popped from stacks.
O(N) Space Complexity: Due to stack usage for nested structures.



//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends


class Solution {
  public:
    string decodedString(string &s) {
        // code here
        stack<int>countstack;//stack for multipliers(k values)
        stack<string>stringstack;//stack for intermediate string
        string currstring="";//curr string being built
        int currnum=0;
        for(char c:s)
        {
            if(isdigit(c))
            {
                currnum=currnum*10+(c-'0');//constructing multidigit number
                
            }
            else if(c=='[')
            {
                countstack.push(currnum);//store the multiplier
                stringstack.push(currstring);//store the string built so far
                currnum=0;
                currstring="";
            }
            else if(c==']')
            {
                int repeat=countstack.top();
                countstack.pop();//get repeat count
                string temp="";
                for(int i=0;i<repeat;i++)
                {
                    temp+=currstring;//repeat the decoded string
                }
                currstring=stringstack.top()+temp;//append the previous strig
                stringstack.pop();
            }
            else
            {
                currstring+=c;//append normal characters to current string
            }
        }
        return currstring;
        
        
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        string s;
        cin >> s;

        Solution ob;
        cout << ob.decodedString(s) << "\n";

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
