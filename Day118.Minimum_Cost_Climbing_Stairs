Stepwise Approach for minCostClimbingStairs
The problem requires us to find the minimum cost to reach the top of the staircase, given an array where cost[i] represents the cost of stepping on the ith stair.

Step 1: Understanding the Problem
You can start from either step 0 or step 1.
From each step, you can move either one step or two steps ahead.
The goal is to reach the top while incurring the minimum cost.
Step 2: Define the Approach
The Dynamic Programming (Bottom-Up) approach is used to update the cost array directly.
We modify cost[i] to represent the minimum cost required to reach step i.
Finally, we return the minimum cost between the last two steps.
Step 3: Initialize Variables
n = cost.size(): Get the number of steps in the staircase.
Step 4: Iterate Over the Array (Bottom-Up DP)
Start from i = 2 because the first two steps already have their initial costs.

For each i, update the cost at i as:

𝑐
𝑜
𝑠
𝑡
[
𝑖
]
=
𝑐
𝑜
𝑠
𝑡
[
𝑖
]
+
min
⁡
(
𝑐
𝑜
𝑠
𝑡
[
𝑖
−
1
]
,
𝑐
𝑜
𝑠
𝑡
[
𝑖
−
2
]
)
cost[i]=cost[i]+min(cost[i−1],cost[i−2])
This means:

The cost of reaching step i is the cost at i plus the minimum cost of getting there from either i-1 or i-2.
Step 5: Return the Minimum of the Last Two Steps
Since we can end on either the last step (n-1) or the second last step (n-2), we return:

min
⁡
(
𝑐
𝑜
𝑠
𝑡
[
𝑛
−
1
]
,
𝑐
𝑜
𝑠
𝑡
[
𝑛
−
2
]
)
min(cost[n−1],cost[n−2])
Final Code Explanation
int minCostClimbingStairs(vector<int>& cost) {
    int n = cost.size();  // Step 1: Get the size of the cost array

    // Step 2: Iterate from step 2 to n-1
    for (int i = 2; i < n; i++) {
        cost[i] += min(cost[i - 1], cost[i - 2]); // Step 3: DP formula update
    }

    // Step 4: Return the minimum cost to reach the last step
    return min(cost[n - 1], cost[n - 2]);
}
Time & Space Complexity Analysis
Time Complexity: 
𝑂
(
𝑛
)
O(n) → We iterate through the cost array once.
Space Complexity: 
𝑂
(
1
)
O(1) → No extra space is used; we modify the input array in place.
Example Walkthrough
Input:
cost = [10, 15, 20]
Iterations:
Initial Array: [10, 15, 20]
Update at i = 2:
𝑐
𝑜
𝑠
𝑡
[
2
]
=
20
+
min
⁡
(
15
,
10
)
=
20
+
10
=
30
cost[2]=20+min(15,10)=20+10=30
Updated Array: [10, 15, 30]
Final Step:
min
⁡
(
30
,
15
)
=
15
min(30,15)=15
Output: 15
Conclusion
This approach efficiently computes the minimum cost to reach the top using a bottom-up DP strategy, modifying the input array in place to save space. 🚀

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

//Back-end complete function Template for C++

class Solution {
  public:
//   int solve(int s,vector<int>&cost,vector<int>&dp)
//   {
//       int n=cost.size();
//       if(s>=n)
//       return 0;
//       if(dp[s]!=-1)
//       return dp[s];
//       int one=cost[s]+solve(s+1,cost,dp);
//       int two=cost[s]+solve(s+2,cost,dp);
//       return min(one,two);
//   }
    int minCostClimbingStairs(vector<int>& cost) {
        // Write your code here
        int n=cost.size();
        // vector<int>dp(n+1,-1);
        // return min(solve(0,cost,dp),solve(1,cost,dp));
        for(int i=2;i<n;i++)
        cost[i]+=min(cost[i-1],cost[i-2]);
        return min(cost[n-1],cost[n-2]);
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();

    while (t-- > 0) {
        string str;
        getline(cin, str);

        stringstream ss(str);
        vector<int> arr;
        int num;
        while (ss >> num) {
            arr.push_back(num);
        }
        Solution sln;
        int res = sln.minCostClimbingStairs(arr);
        cout << res << endl;
        cout << "~" << endl;
    }

    return 0;
}
// } Driver Code Ends
