//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++
class Solution {
  public:
    vector<int> sumClosest(vector<int>& arr, int target) {
        // code here
         vector<int>ans;
        sort(arr.begin(),arr.end());
        int i=0;
        int j=arr.size()-1;
        while(i<j)
        {
            if(ans.size()==0)
            {
                ans.push_back(arr[i]);
                ans.push_back(arr[j]);
            }
            
            else if(arr[i]+arr[j]<=target)
            {
                if(abs(target-(arr[i]+arr[j]))==abs(target-(ans[0]+ans[1])))
                {
                    if(abs(arr[j]-arr[i])>abs(ans[0]-ans[1]))
                    {
                        ans[0]=arr[i];
                        ans[1]=arr[j];
                    }
                }
                
                else if(abs(target-(arr[i]+arr[j]))<abs(target-(ans[0]+ans[1])))
                {
                    ans[0]=arr[i];
                    ans[1]=arr[j];
                }
                
                i++;
            }
            
            else
            {
                if(abs(target-(arr[i]+arr[j]))==abs(target-(ans[0]+ans[1])))
                {
                    if(abs(arr[j]-arr[i])>abs(ans[0]-ans[1]))
                    {
                        ans[0]=arr[i];
                        ans[1]=arr[j];
                    }
                }
                
                else if(abs(target-(arr[i]+arr[j]))<abs(target-(ans[0]+ans[1])))
                {
                    ans[0]=arr[i];
                    ans[1]=arr[j];
                }
                
                j--;
                
            }
            
            
        }
        
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    string ts;
    getline(cin, ts);
    int t = stoi(ts);
    while (t--) {

        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        string ks;
        getline(cin, ks);
        int target = stoi(ks);
        Solution ob;
        vector<int> ans = ob.sumClosest(arr, target);
        if (ans.empty()) {
            cout << "[]";
        } else {
            for (auto it : ans) {
                cout << it << " ";
            }
        }
        cout << endl;
        cout << "~\n";
    }

    return 0;
}
// } Driver Code Ends




//naive approach

// C++ Program to find pair with sum closest to target 
// using Two Pointer Technique

#include <bits/stdc++.h>
using namespace std;

// function to return the pair with sum closest to target
vector<int> sumClosest(vector<int> &arr, int target) {
    int n = arr.size();
    sort(arr.begin(), arr.end());
    vector<int> res;
    int minDiff = INT_MAX;

    int left = 0, right = n - 1;

    while (left < right) {
        int currSum = arr[left] + arr[right];

        // Check if this pair is closer than the closest
        // pair so far
        if (abs(target - currSum) < minDiff) {
            minDiff = abs(target - currSum);
            res = {arr[left], arr[right]};
        }

        // If this pair has less sum, move to greater values
        if (currSum < target)
            left++;

        // If this pair has more sum, move to smaller values
        else if (currSum > target)
            right--;

        // If this pair has sum = target, return it
        else
            return res;
    }

    return res;
}

int main() {
    vector<int> arr = {5, 2, 7, 1, 4};
    int target = 10;

    vector<int> res = sumClosest(arr, target);
    if(res.size() > 0)
        cout << res[0] << " " << res[1];
    return 0;
}
