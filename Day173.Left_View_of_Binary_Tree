Problem Statement:
Left View of a Binary Tree:
Given a binary tree, the task is to return a vector containing the nodes visible from the left side when looking at the tree from the top. The left view consists of the first node encountered at each level when traversing from left to right.

Example:
Consider the following binary tree:

        1
      /   \
     2      3
    / \    / \
   4   5  6   7
  /
8
The left view of this tree would be [1, 2, 4, 8] because:

Level 0: 1

Level 1: 2

Level 2: 4

Level 3: 8

Stepwise Approach:
Initialization:

Check if the root is NULL. If so, return an empty vector.

Initialize a queue to perform level-order traversal (BFS) and push the root node into the queue.

Initialize an empty vector ans to store the left view nodes.

Level-order Traversal (BFS):

While the queue is not empty:

Get the number of nodes at the current level (n = q.size()).

Initialize a temporary node pointer node to NULL.

Iterate over all nodes at the current level:

Pop the front node from the queue and store it in node.

Push the right child of node into the queue if it exists.

Push the left child of node into the queue if it exists.

After processing all nodes at the current level, the last node in the iteration (which is the leftmost node at that level) is added to ans.

Return the Result:

After traversing all levels, return the vector ans containing the left view nodes.

Solution Code:
cpp
#include <vector>
#include <queue>
using namespace std;

// Definition for a binary tree node.
struct Node {
    int data;
    Node *left;
    Node *right;
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

vector<int> leftView(Node *root) {
    if (!root)
        return {};
    
    queue<Node*> q;
    q.push(root);
    vector<int> ans;
    
    while (!q.empty()) {
        int n = q.size();
        Node *node = nullptr;
        
        while (n--) {
            node = q.front();
            q.pop();
            
            if (node->right)
                q.push(node->right);
            if (node->left)
                q.push(node->left);
        }
        
        ans.push_back(node->data);
    }
    
    return ans;
}
Explanation:
The algorithm uses BFS to traverse the tree level by level.

For each level, it processes nodes from right to left (by pushing the right child before the left child into the queue). This ensures that the last node processed in each level is the leftmost node.

The leftmost node of each level is added to the result vector, which is returned after traversing all levels.

This approach efficiently captures the left view by leveraging the order of node processing in the queue.

Time Complexity:
O(N), where N is the number of nodes in the tree, as each node is visited exactly once.

Space Complexity:
O(N), due to the queue storing nodes at each level (worst case when the tree is a perfect binary tree).



//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;
};


// } Driver Code Ends

/* A binary tree node

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};
 */

class Solution {
  public:
    vector<int> leftView(Node *root) {
        // code here
     if(!root)
     return {};
     queue<Node*>q;
     q.push(root);
     vector<int>ans;
     while(!q.empty())
     {
         int n=q.size();
         Node *node=NULL;
         while(n--)
         {
             node=q.front();
             q.pop();
             if(node->right)
             {
                 q.push(node->right);
             }
             if(node->left)
             {
                 q.push(node->left);
             }
         }
         ans.push_back(node->data);
     }
     return ans;
    }
};


//{ Driver Code Starts.

// Utility function to create a new Tree Node
Node* newNode(int val) {
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}

// Function to Build Tree
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // for(string i:ip)
    //     cout<<i<<" ";
    // cout<<endl;
    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}

int main() {
    int t;
    scanf("%d ", &t);
    while (t--) {
        string s;
        getline(cin, s);
        Node* root = buildTree(s);
        Solution ob;
        vector<int> vec = ob.leftView(root);
        if (vec.size() == 0) {
            cout << "[]";
        }
        for (int x : vec)
            cout << x << " ";
        cout << endl;

        cout << "~"
             << "\n";
    }
    return 0;
}

// } Driver Code Ends
