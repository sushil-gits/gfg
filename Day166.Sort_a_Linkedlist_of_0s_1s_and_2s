Stepwise Approach:
Initialize Frequency Array

Create an array freq_count[3] and initialize all values to 0.

This array will store how many times each value (0, 1, or 2) occurs in the linked list.

First Traversal: Count Frequencies

Start from the head node (curr = head).

For each node:

Increase freq_count[curr->data] by 1.

Move to the next node (curr = curr->next).

After this loop, freq_count will have the number of 0s, 1s, and 2s present in the linked list.

Prepare for Overwriting Node Values

Set i = 0 (this will represent which value we are currently writing into nodes).

Reset curr = head to start again from the beginning of the list.

Second Traversal: Overwrite Node Values

While traversing the list:

If freq_count[i] == 0 (no more values of i left to write):

Move to the next number (i++).

Otherwise:

Set curr->data = i (overwrite current node's data with i).

Decrease freq_count[i] by 1 (one instance used).

Move to the next node (curr = curr->next).

Return the Updated List

After overwriting all nodes, return head.

In Short:
First Loop → Count how many 0s, 1s, and 2s are there.

Second Loop → Overwrite the linked list with sorted 0s, then 1s, then 2s based on the counts.


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

/* Link list Node */
class Node {
  public:
    int data;
    Node* next;

    Node(int x) {
        data = x;
        next = nullptr;
    }
};

void printList(Node* node) {
    while (node != NULL) {
        cout << node->data << " ";
        node = node->next;
    }
    cout << "\n";
}

void freeList(struct Node* head) {
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        delete temp;
    }
}


// } Driver Code Ends

/*

  Node is defined as
  struct Node {
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
class Solution {
  public:
    // Function to sort a linked list of 0s, 1s and 2s.
    Node* segregate(Node* head) {
        // code here
        int freq_count[3]={0};
        Node *curr=head;
        while(curr)
        {
            freq_count[curr->data]++;
            curr=curr->next;
        }
        int i=0;
        curr=head;
        while(curr)
        {
            if(freq_count[i]==0)
            {
                i++;
            }
            else
            {
                curr->data=i;
                freq_count[i]--;
                curr=curr->next;
            }
        }
        return head;
    }
};



//{ Driver Code Starts.

// Driver program to test above functions
int main() {
    int t, k;
    cin >> t;
    cin.ignore(); // Ignore the newline character after t

    while (t--) {
        string input;
        getline(cin, input); // Read the entire line for the array elements

        stringstream ss(input);
        Node *head = nullptr, *tail = nullptr;
        int x;

        if (ss >> x) {
            head = new Node(x);
            tail = head;

            while (ss >> x) {
                tail->next = new Node(x);
                tail = tail->next;
            }

            // Link the last node to the head if k is 1 to make it circular
            if (k == 1) {
                tail->next = head;
            }
        }

        Solution ob;
        Node* newHead = ob.segregate(head);
        printList(newHead);
        cout << "~" << endl;
    }

    return 0;
}
// } Driver Code Ends
