Problem: Minimum Number of Platforms Required
Problem Statement:
Given the arrival and departure times of trains at a railway station, determine the minimum number of platforms required so that no train has to wait.

Example:
Input:
arr = [900, 940, 950, 1100, 1500, 1800];
dep = [910, 1200, 1120, 1130, 1900, 2000];
Output:
3
Explanation:
At time 950, there are three trains at the station:

Arrival: 900, 940, 950

Departure: 910, 1200, 1120
Thus, 3 platforms are needed at that time.

Approach: Using an Ordered Map
The idea is to track the number of trains present at the station using an ordered map<int, int>, which acts as a timeline.

Stepwise Explanation:
Use a map<int, int> to Track Events:

Increment the count at arr[i] (train arrives).

Decrement the count at dep[i] + 1 (train departs after its departure time).

Iterate Over the Timeline:

Maintain a counter (count) to keep track of current active trains.

Keep a maxi variable to store the maximum count at any time (this is the answer).




//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    // Function to find the minimum number of platforms required at the
    // railway station such that no train waits.
    int findPlatform(vector<int>& arr, vector<int>& dep) {
        // Your code here
        map<int,int>m;
        for(auto i:arr)
        {
            m[i]++;
        }
        for(auto i:dep)
        {
            m[i+1]--;
        }
        int maxi=1;
        int count=0;
        for(auto i:m)
        {
            count+=i.second;
            maxi=max(maxi,count);
        }
        return maxi;
    }
};



//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr, dep;
        string input;

        // Read first array (arr)
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        // Read second array (dep)
        getline(cin, input);
        stringstream ss2(input);
        while (ss2 >> number) {
            dep.push_back(number);
        }

        // Assuming Solution class is defined elsewhere with a method findPlatform
        Solution ob;
        cout << ob.findPlatform(arr, dep);

        cout << endl;
        cout << "~\n";
    }
    return 0;
}

// } Driver Code Ends
