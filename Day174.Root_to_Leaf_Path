ðŸ§¾ Problem Statement:
Print all Root-to-Leaf Paths in a Binary Tree

You're given the root of a binary tree. Your task is to return all the paths from the root node to all leaf nodes.

Each path should be represented as a list of integers (node values), and all such paths should be returned as a list of lists.

âœ… Constraints:
A leaf node is a node with no children (left == NULL and right == NULL).

Each path must start from the root and end at a leaf.

ðŸ§  Stepwise Approach:
Use DFS (Depth-First Search):

Traverse the tree from the root to the leaves.

Use recursion to explore all possible paths.

Maintain a temporary list (ans1):

It keeps track of the current path being explored.

When a leaf node is reached:

Add a copy of the current path to the final answer (ans).

Backtracking:

After exploring a path, remove the last node (backtrack) before exploring the next branch.

âœ… Final Code with Comments:
// Helper function to perform DFS and collect root-to-leaf paths
void solve(Node *root, vector<vector<int>>& ans, vector<int>& ans1) {
    // Base case: if the node is NULL, return
    if (!root) return;

    // Include the current node in the path
    ans1.push_back(root->data);

    // If it's a leaf node, save the current path
    if (!root->left && !root->right) {
        ans.push_back(ans1);       // Store the path in ans
        ans1.pop_back();           // Backtrack to explore other paths
        return;
    }

    // Recursively explore the left and right subtrees
    solve(root->left, ans, ans1);
    solve(root->right, ans, ans1);

    // Backtrack: remove current node before returning to parent
    ans1.pop_back();
}

// Main function to be called with the root of the tree
vector<vector<int>> Paths(Node* root) {
    vector<vector<int>> ans;  // Stores all paths
    vector<int> ans1;         // Temporary path list
    solve(root, ans, ans1);   // Start DFS from root
    return ans;
}
ðŸ§ª Example:
Input Tree:
      1
     / \
    2   3
   /
  4
Output
[
 [1, 2, 4],
 [1, 3]
]



//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node *left;
    struct Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

// Function to Build Tree
Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}

Node *inputTree() {
    string treeString;
    getline(cin, treeString);
    Node *root = buildTree(treeString);
    return root;
}

void inorder(Node *root) {
    if (root == NULL)
        return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

class Matrix {
  public:
    template <class T>
    static void input(vector<vector<T>> &A, int n, int m) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                scanf("%d ", &A[i][j]);
            }
        }
    }

    template <class T>
    static void print(vector<vector<T>> &A) {
        for (int i = 0; i < A.size(); i++) {
            for (int j = 0; j < A[i].size(); j++) {
                cout << A[i][j] << " ";
            }
            cout << endl;
        }
    }
};


// } Driver Code Ends

/*

Definition for Binary Tree Node
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
  void solve(Node *root,vector<vector<int>>&ans,vector<int>&ans1)
  {
      if(!root)
      return ;
      ans1.push_back(root->data);
      if(!root->left && !root->right)
      {
          ans.push_back(ans1);
          ans1.pop_back();
          return ;
      }
      solve(root->left,ans,ans1);
      solve(root->right,ans,ans1);
      ans1.pop_back();
  }
    vector<vector<int>> Paths(Node* root) {
        // code here
        vector<vector<int>>ans;
        vector<int>ans1;
        solve(root,ans,ans1);
        return ans;
    }
};



//{ Driver Code Starts.

int main() {
    int t;
    scanf("%d ", &t);
    while (t--) {

        Node *root = inputTree();

        Solution obj;
        vector<vector<int>> res = obj.Paths(root);

        Matrix::print(res);

        cout << "~"
             << "\n";
    }
}

// } Driver Code Ends
