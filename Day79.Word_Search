problem---based on backttracking concepts
#Approach--
Approach: Word Search in a 2D Grid using DFS & Backtracking
1Ô∏è‚É£ Understanding the Problem
We are given a 2D character matrix and a target word.
The word can be formed by moving horizontally or vertically, but we cannot reuse the same cell.
We need to check if the word exists in the grid.
2Ô∏è‚É£ Thought Process
We will start a DFS (Depth-First Search) from every cell in the matrix.
At each step, we will:
Check if the current character matches the expected letter in the word.
Explore all four possible directions (up, down, left, right).
Mark the current cell as visited to prevent reuse in the same path.
If we match all characters, return true.
If no path works, we backtrack to explore other possibilities.
3Ô∏è‚É£ Steps to Solve the Problem
Step 1: Iterate Over Each Cell
Start iterating over all cells in the matrix.
If the character matches the first letter of the word, start DFS from that position.
Step 2: Implement DFS with Backtracking
Define a recursive function dfs(i, j, index) where:
(i, j) is the current cell position.
index keeps track of the current letter in the word.
If index == word.length(), return true (all characters matched).
Check boundary conditions:
If out of bounds ‚Üí return false.
If cell is already visited or doesn‚Äôt match the word ‚Üí return false.
Mark the cell as visited to prevent reuse.
Explore all four directions recursively.
If any direction returns true, stop searching.
If no valid path is found, backtrack by marking the cell as unvisited.
Step 3: Return Final Result
If any DFS call finds the word, return true.
If no valid path exists, return false.
4Ô∏è‚É£ Optimizations & Edge Cases Considered
‚úî Use a visited[][] array instead of modifying the matrix to prevent unwanted changes.
‚úî Stop early if we find the word to avoid unnecessary recursion.
‚úî Consider edge cases like:

Word not present in the matrix.
Word longer than total matrix cells.
Multiple starting points with backtracking to explore all possibilities.
Edge Cases Considered
‚úî Word starts from different locations
‚úî Matrix with one row/column
‚úî Word longer than total cells
‚úî Word not present
‚úî Multiple possible paths (ensuring correct path selection)



code========================
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
   // Directions for moving (row, col): {down, up, right, left}
    int dx[4] = {1, -1, 0, 0};
    int dy[4] = {0, 0, 1, -1};

    bool dfs(vector<vector<char>> &mat, string &word, int i, int j, int index, vector<vector<bool>> &visited) {
        // If we matched all characters, return true
        if (index == word.length()) return true;

        // Boundary checks and matching condition
        if (i < 0 || i >= mat.size() || j < 0 || j >= mat[0].size() || visited[i][j] || mat[i][j] != word[index]) 
            return false;

        // Mark as visited
        visited[i][j] = true;

        // Explore all 4 possible directions
        for (int d = 0; d < 4; d++) {
            int newX = i + dx[d];
            int newY = j + dy[d];

            if (dfs(mat, word, newX, newY, index + 1, visited)) {
                return true;
            }
        }

        // Backtrack (unmark the current cell)
        visited[i][j] = false;
        return false;
    }
    bool isWordExist(vector<vector<char>>& mat, string& word) {
        // Code here
        int n = mat.size(), m = mat[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m, false)); // Track visited cells

        // Start DFS from every cell in the matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == word[0] && dfs(mat, word, i, j, 0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> mat(n, vector<char>(m, '*'));
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                cin >> mat[i][j];
        string word;
        cin >> word;
        Solution obj;
        bool ans = obj.isWordExist(mat, word);
        if (ans)
            cout << "true\n";
        else
            cout << "false\n";

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
===================================================================================================
Complexity Analysis
Time Complexity:

Worst case: 
ùëÇ
(
ùëõ
√ó
ùëö
√ó
4
ùêø
)
O(n√óm√ó4 
L
 )
Each cell can start a DFS, and in the worst case, we explore 4 directions for each letter.
Space Complexity:

ùëÇ
(
ùëõ
√ó
ùëö
)
O(n√óm) for the visited matrix.
ùëÇ
(
ùêø
)
O(L) for the recursive stack (where L is the length of the word).
