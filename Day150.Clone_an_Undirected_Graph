âœ… Stepwise Approach:
Check for NULL Input
if (node == nullptr) return nullptr;
If the input node is nullptr, there is no graph to clone.

Return nullptr immediately.

Create a Hash Map to Store Cloned Nodes
unordered_map<Node*, Node*> mp;
This map keeps track of all original nodes (Node*) and their corresponding clones (Node*).

It helps to avoid cloning the same node multiple times and resolves cycles in the graph.

Clone the First Node
Node* newNode = new Node(node->val);
mp[node] = newNode;
A new node is created with the same value as the input node.

It is stored in the hash map as the clone of the original node.

Use a Queue for BFS Traversal
queue<Node*> q;
q.push(node);
Breadth-First Search (BFS) is used to traverse the graph.

Start by pushing the original node into the queue.

Start BFS Loop
while (!q.empty()) {
    Node* cur = q.front();
    q.pop();
Process each node in the queue.

cur represents the current node being visited.

Traverse Neighbors of Current Node
for (Node* neighbor : cur->neighbors) {
For each neighbor of the current node, do the following:

Clone the Neighbor If Not Already Cloned
if (mp.find(neighbor) == mp.end()) {
    mp[neighbor] = new Node(neighbor->val);
    q.push(neighbor);
}
If the neighbor node hasn't been cloned yet:

Create a new node with the same value.

Store it in the map.

Push the original neighbor into the queue for later BFS traversal.

Add Cloned Neighbor to Cloned Node
mp[cur]->neighbors.push_back(mp[neighbor]);
Connect the cloned current node with the cloned neighbor.

This ensures the new graph has the same connections.

Return the Cloned Starting Node
return newNode;
After BFS traversal and cloning is complete, return the clone of the starting node.

ðŸ’¡ Summary:
This approach uses BFS and a hash map to handle cycles and prevent redundant cloning. It guarantees that all nodes and connections (edges) are deep-copied correctly.





//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
#include <sstream>
using namespace std;

struct Node {
    int val;
    vector<Node*> neighbors;

    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }

    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }

    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};

vector<Node*> bfs(Node* src) {
    vector<Node*> ans;
    map<Node*, bool> visit;
    queue<Node*> q;
    q.push(src);
    visit[src] = true;
    while (!q.empty()) {
        Node* u = q.front();
        ans.push_back(u);
        q.pop();
        vector<Node*> v = u->neighbors;
        int n = v.size();
        for (int i = 0; i < n; i++) {
            if (!visit[v[i]]) {
                visit[v[i]] = true;
                q.push(v[i]);
            }
        }
    }
    return ans;
}

bool compare(Node* prev, Node* new_node, unordered_set<Node*>& prev_vis,
             unordered_set<Node*>& new_vis) {
    if (prev == new_node) {
        return false;
    }
    if (!prev || !new_node) {
        if ((!prev && new_node) || (prev && !new_node)) {
            return false;
        }
        return true;
    }

    if (prev_vis.count(prev) || new_vis.count(new_node)) {
        if ((prev_vis.count(prev) && !new_vis.count(new_node)) ||
            (!prev_vis.count(prev) && new_vis.count(new_node))) {
            return false;
        }
        return true;
    }
    prev_vis.insert(prev);
    new_vis.insert(new_node);

    if (prev->val != new_node->val) {
        return false;
    }

    size_t prev_n = prev->neighbors.size();
    size_t new_n = new_node->neighbors.size();
    if (prev_n != new_n) {
        return false;
    }

    sort(prev->neighbors.begin(), prev->neighbors.end(),
         [](Node* a, Node* b) { return a->val < b->val; });
    sort(new_node->neighbors.begin(), new_node->neighbors.end(),
         [](Node* a, Node* b) { return a->val < b->val; });

    for (size_t i = 0; i < prev_n; ++i) {
        if (!compare(prev->neighbors[i], new_node->neighbors[i], prev_vis, new_vis)) {
            return false;
        }
    }

    return true;
}


// } Driver Code Ends

// User function Template for C++

// struct Node {
//     int val;
//     vector<Node*> neighbors;
//     Node() {
//         val = 0;
//         neighbors = vector<Node*>();
//     }
//     Node(int _val) {
//         val = _val;
//         neighbors = vector<Node*>();
//     }
//     Node(int _val, vector<Node*> _neighbors) {
//         val = _val;
//         neighbors = _neighbors;
//     }
// };

class Solution {
  public:
    Node* cloneGraph(Node* node) {
        // code here
               if (node == nullptr) return nullptr;

        unordered_map<Node*, Node*> mp;
        Node* newNode = new Node(node->val);
        mp[node] = newNode;

        queue<Node*> q;
        q.push(node);

        while (!q.empty()) {
            Node* cur = q.front();
            q.pop();

            for (Node* neighbor : cur->neighbors) {
                if (mp.find(neighbor) == mp.end()) {
                    mp[neighbor] = new Node(neighbor->val);
                    q.push(neighbor);
                }
                mp[cur]->neighbors.push_back(mp[neighbor]);
            }
        }

        return newNode;
    }
};



//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        cin >> N;
        Node* root = NULL;
        vector<Node*> v(N);
        std::string buffer;
        std::getline(std::cin, buffer);
        for (int i = 0; i < N; i++)
            v[i] = new Node(i);
        for (int i = 0; i < N; i++) {
            std::vector<Node*> vec;
            std::string buffer;
            int data;
            std::getline(std::cin, buffer);
            std::istringstream iss(buffer);
            while (iss >> data)
                vec.push_back(v[data]);
            v[i]->neighbors = vec;
        }
        Solution ob;
        vector<Node*> prev = bfs(v[0]);
        Node* ans = ob.cloneGraph(v[0]);
        // vector<Node*>now = bfs(ans);
        unordered_set<Node*> prev_vis, new_vis;
        if (compare(v[0], ans, prev_vis, new_vis))
            cout << "true" << endl;
        else
            cout << "false" << endl;

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
