üîç Goal:
Given a list of words sorted in a specific alien dictionary order, return a string that represents the order of characters in the alien language.

‚úÖ Stepwise Breakdown:
Step 1: Initialize Variables
int V = 26; // Total number of lowercase English letters
vector<int> adj[V]; // Adjacency list for graph representation
unordered_set<int> st; // To store only the characters that are present in the input
Step 2: Store All Unique Characters
Iterate through each word and insert all characters into a set to track which characters are part of the alien language.
for (int i = 0; i < n; i++) {
    for (char c : words[i]) {
        st.insert(c - 'a'); // Convert char to index (0-25)
    }
}
Step 3: Build the Graph (Character Dependency)
Compare adjacent words to determine the first mismatched character. This mismatch helps identify the relative order of characters (directed edge).
for (int i = 1; i < n; i++) {
    string f = words[i - 1], s = words[i];
    int j = 0;
    bool flag = false;
    while (j < min(f.size(), s.size())) {
        if (f[j] != s[j]) {
            adj[f[j] - 'a'].push_back(s[j] - 'a');
            flag = true;
            break;
        }
        j++;
    }
    if (!flag && f.size() > s.size()) {
        return ""; // Invalid order (prefix issue)
    }
}
Step 4: Calculate In-degrees of All Characters
vector<int> indeg(V, 0);
for (int i = 0; i < V; i++) {
    for (auto j : adj[i]) {
        indeg[j]++;
    }
}
Step 5: Initialize Queue with Nodes Having 0 In-degree
queue<int> q;
for (int i = 0; i < V; i++) {
    if (st.find(i) != st.end() && indeg[i] == 0) {
        q.push(i);
    }
}
Step 6: Topological Sort (Kahn‚Äôs Algorithm)
This gives us a valid character ordering.
vector<int> res;
while (!q.empty()) {
    int curr = q.front(); q.pop();
    res.push_back(curr);
    for (auto i : adj[curr]) {
        indeg[i]--;
        if (indeg[i] == 0) {
            q.push(i);
        }
    }
}
Step 7: Check for Cycles
If the result size is less than the total unique characters, there's a cycle.
if (res.size() != st.size()) return "";
Step 8: Convert Result to String
string ans = "";
for (int i : res) {
    ans.push_back(i + 'a'); // Convert index back to character
}
return ans;
üß† Key Concepts Used:
Graph Representation

Topological Sorting (Kahn‚Äôs Algorithm)

Cycle Detection via In-degree Check

Handling Prefix Cases (Invalid Order)

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    string findOrder(vector<string> &words) {
        // code here
        int V=26;
        vector<int>adj[V];
        int n=words.size();
        unordered_set<int>st;
        
        // storing all the unique character
        for(int i=0;i<n;i++)
        {
            for(char c:words[i])
            {
                st.insert(c-'a');
            }
        }
        
        // building the graph
        for(int i=1;i<n;i++)
        {
            string f=words[i-1];
            string s=words[i];
            int l1=f.size();
            int l2=s.size();
            int j=0;
            bool flag=0;
            while(j<min(l1,l2))
            {
                if(f[j]!=s[j])
                {
                    adj[f[j]-'a'].push_back(s[j]-'a');
                    flag=1;
                    break;
                }
                j++;
            }
            if(flag==0)
            {
                if(l1>l2)
                return "";
            }
        }
        
        // calculating the in-degree of all characters
        vector<int>indeg(V,0);
        for(int i=0;i<V;i++)
        {
            for(auto j:adj[i])
            {
                indeg[j]++;
            }
        }
        // creatin the queue which stores the nodes having 0 indegree
        queue<int>q;
        for(int i=0;i<V;i++)
        {
            if(st.find(i)!=st.end()&&indeg[i]==0)
            {
                q.push(i);
            }
        }
        
        // Topological Sort(KAHN's Algorithm)
        vector<int>res;
        while(!q.empty())
        {
            int curr=q.front();
            q.pop();
            res.push_back(curr);
            for(auto i:adj[curr])
            {
                indeg[i]--;
                if(indeg[i]==0)
                {
                    q.push(i);
                }
            }
        }
        
        // convert result to string
        string ans="";
        if(res.size()!=st.size())//chack for the cycles
        return ans;
        for(int i=0;i<res.size();i++)
        {
            ans.push_back(res[i]+'a');
            
        }
        return ans;
    }
};


//{ Driver Code Starts.

bool validate(const vector<string> &original, const string &order) {
    unordered_map<char, int> mp;
    for (const string &word : original) {
        for (const char &ch : word) {
            mp[ch] = 1;
        }
    }
    for (const char &ch : order) {
        if (mp.find(ch) == mp.end())
            return false;
        mp.erase(ch);
    }
    if (!mp.empty())
        return false;

    for (int i = 0; i < order.size(); i++) {
        mp[order[i]] = i;
    }

    for (int i = 0; i < original.size() - 1; i++) {
        const string &a = original[i];
        const string &b = original[i + 1];
        int k = 0, n = a.size(), m = b.size();
        while (k < n and k < m and a[k] == b[k]) {
            k++;
        }
        if (k < n and k < m and mp[a[k]] > mp[b[k]]) {
            return false;
        }
        if (k != n and k == m) {
            return false;
        }
    }
    return true;
}

int main() {
    string str;
    getline(cin, str);
    int t = stoi(str);
    while (t--) {
        getline(cin, str);
        stringstream ss(str);
        string curr;
        vector<string> words;
        while (ss >> curr)
            words.push_back(curr);

        vector<string> original = words;

        Solution ob;
        string order = ob.findOrder(words);

        if (order.empty()) {
            cout << "\"\"" << endl;
        } else {
            cout << (validate(original, order) ? "true" : "false") << endl;
        }
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
