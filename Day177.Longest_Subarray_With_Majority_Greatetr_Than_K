Problem Statement:
Given an array of integers arr and an integer k, find the length of the longest subarray where the number of elements greater than k is more than the number of elements less than or equal to k.

Approach:
The problem can be transformed into finding the longest subarray where the count of elements greater than k minus the count of elements less than or equal to k is positive. This is similar to the problem of finding the longest subarray with a sum greater than zero after transforming the array.

Steps:
Transform the Array: For each element in the array:

If the element is greater than k, replace it with +1.

If the element is less than or equal to k, replace it with -1.

Now, the problem reduces to finding the longest subarray with a sum greater than zero.

Prefix Sum and Hash Map:

Compute the prefix sum as we iterate through the transformed array.

Use a hash map to store the first occurrence of each prefix sum.

For each prefix sum s, if s > 0, the entire subarray from the start to the current index is valid.

Otherwise, check if (s - 1) exists in the hash map. If it does, the subarray from map[s-1] + 1 to the current index is valid.

Update the maximum length found during the iteration.

Solution Code:
cpp
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

int longestSubarray(vector<int> &arr, int k) {
    int n = arr.size();
    int ans = 0;
    int cnt = 0;
    
    unordered_map<int, int> mp;
    // Initialize the map with -1 for possible prefix sums
    for (int i = -n - 1; i <= n + 1; ++i) {
        mp[i] = -1;
    }
    
    mp[0] = -1; // Prefix sum 0 occurs before the array starts
    
    for (int i = 0; i < n; ++i) {
        cnt += (arr[i] > k) ? 1 : -1;
        
        if (mp.find(cnt) == mp.end() || mp[cnt] == -1) {
            mp[cnt] = i;
        }
        
        if (cnt > 0) {
            ans = i + 1;
        } else if (mp.find(cnt - 1) != mp.end() && mp[cnt - 1] != -1) {
            ans = max(ans, i - mp[cnt - 1]);
        }
    }
    
    return ans;
}
Explanation:
Initialization: We start by initializing a hash map to store the first occurrence of each prefix sum. The prefix sums can range from -n to n, so we initialize all possible values to -1.

Prefix Sum Calculation: As we iterate through the array, we compute the running count (cnt):

Increment cnt by 1 if the current element is greater than k.

Decrement cnt by 1 if the current element is less than or equal to k.

Tracking First Occurrences: For each computed cnt, if it hasn't been seen before, we store its first occurrence index in the hash map.

Checking Valid Subarrays:

If cnt > 0, the subarray from the start to the current index is valid, so we update the answer to i + 1.

If cnt - 1 has been seen before, the subarray from mp[cnt - 1] + 1 to the current index is valid, and we update the answer if this subarray is longer than the current maximum.

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

// User function Template for C++
class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        // Code here
         int n = arr.size();
        int ans = 0;
        int cnt = 0;
        
        unordered_map <int, int> mp;
        for(int i = -n-1; i <= n+1; i++) mp[i] = -1;
        
        mp[0] = 0;
        for(int i = 0; i < n; i++){
            cnt += (arr[i] > k);
            cnt -= (arr[i] <= k);
            
            if(mp[cnt] == -1) mp[cnt] = i;
            if(cnt > 0) ans = i+1;
            else if(mp[cnt-1] != -1) ans = max(ans, i - mp[cnt-1]);
        }
        
        return ans;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        getline(cin, input);
        int k = stoi(input);

        Solution ob;
        cout << ob.longestSubarray(arr, k) << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
