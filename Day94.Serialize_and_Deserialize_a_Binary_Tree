Stepwise Approach for Serialization and Deserialization of a Binary Tree
This solution involves two main tasks:

Serialization - Convert a Binary Tree into a list (vector).
Deserialization - Reconstruct the Binary Tree from the list.
Step 1: Serialization (Convert Tree to Vector)
Function: serialize(Node *root)
Purpose: Convert the binary tree into a vector of integers using inorder traversal.
Approach:
Create a helper function helper(Node* root, vector<int>& ans).
Perform an inorder traversal (Left → Root → Right):
Recursively traverse the left subtree.
Push the current node's data into the vector.
Recursively traverse the right subtree.
The result is a sorted inorder representation of the tree in a vector.
Return this vector.
Time Complexity:
O(N), where N is the number of nodes (since each node is visited once).
Step 2: Deserialization (Rebuild Tree from Vector)
Function: deSerialize(vector<int> &arr)
Purpose: Convert the serialized vector back into a Binary Tree.
Approach:
Create the root node using the first element of the vector.
If the vector has only one element, return the root.
Use a helper function help() to recursively reconstruct the tree.
Function: help(vector<int>& arr, int index, Node* root, Node*& sol)
Base case: If index >= arr.size(), return.
Create a new node node using arr[index] and set its left child as root.
If index + 1 is within bounds, create a right child (r) and assign it.
Store the newly created node in sol.
Recursively call help() to construct the rest of the tree.
Time Complexity:
O(N), since we are visiting each node once.
Step 3: Final Output
The serialize() function outputs a vector representing the inorder traversal.
The deSerialize() function reconstructs the tree from this vector.
Potential Issue
Since the inorder traversal loses structural information, deserialization may not restore the tree correctly in all cases.
A better approach would involve preorder or level-order traversal for serialization.
Summary of Functions
Function	Purpose	Approach	Time Complexity
serialize(Node *root)	Convert tree to vector	Inorder traversal	O(N)
deSerialize(vector<int> &arr)	Convert vector to tree	Recursively create nodes	O(N)


//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;

// Tree Node
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};

// Function to Build Tree
Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends
/* A binary tree node has data, pointer to left child
   and a pointer to right child
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */

class Solution {
  public:
  void helper(Node* root,vector<int>&ans){
        if(root==NULL) return;
        helper(root->left,ans);
        ans.push_back(root->data);
        helper(root->right,ans);
    }
    vector<int> serialize(Node *root) {
        vector<int>ans;
        helper(root,ans);
        return ans;
    }

    void help(vector<int>&arr,int index,Node* root,Node* &sol){
        if(index>=arr.size()) return;
        Node* node=new Node(arr[index]);
        node->left=root;
        if(index+1<arr.size()){
            Node* r=new Node(arr[index+1]);
            node->right=r;
        }
        sol=node;
        help(arr,index+2,node,sol);
    }
    Node *deSerialize(vector<int> &arr) {
        Node* ans=new Node(arr[0]);
        if(arr.size()==1){
            return ans;
        }
        Node* sol=NULL;
        help(arr,1,ans,sol);
        return sol;
    }


};

//{ Driver Code Starts.

void inorder(Node *root) {
    if (root == NULL)
        return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

void _deleteTree(Node *node) {
    if (node == NULL)
        return;

    /* first delete both subtrees */
    _deleteTree(node->left);
    _deleteTree(node->right);

    /* then delete the node */
    // cout << "Deleting node: " << node->data << endl;
    delete node;
}

/* Deletes a tree and sets the root as NULL */
void deleteTree(Node **node_ref) {
    _deleteTree(*node_ref);
    *node_ref = NULL;
}

int main() {
    int tc;
    scanf("%d ", &tc);
    while (tc--) {
        string treeString;
        getline(cin, treeString);
        Node *root = buildTree(treeString);

        Solution serial, deserial;
        vector<int> A = serial.serialize(root);
        Node *temp = root;
        deleteTree(&root);
        Node *getRoot = deserial.deSerialize(A);
        inorder(getRoot);

        cout << "\n";

        cout << "~"
             << "\n";
    }

    return 0;
}
// } Driver Code Ends
